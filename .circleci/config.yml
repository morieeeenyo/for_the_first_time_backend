version: 2.1
# Slack通知したり外部サービスとの連携でorbsというのを使います
orbs:
    slack: circleci/slack@4.3.0
    browser-tools: circleci/browser-tools@1.1.3
    
# workflowを作っておくとCircleCIでデプロイまでやりたくなったときとかに便利だったりします
workflows:
    version: 2.1
    build:
        jobs:
        - build

jobs:
  build:
    docker: # 最初に環境設定です.rubyとmysqlとbundlerを指定します
    - image: circleci/ruby:2.6.5-node-browsers
      environment:
        - BUNDLER_VERSION: 2.1.4
        - RAILS_ENV: 'test'
    - image: circleci/mysql:5.6
      environment:
        - MYSQL_ALLOW_EMPTY_PASSWORD: 'true'
        - MYSQL_ROOT_HOST: '127.0.0.1'

    working_directory: ~/sample_app

    # checkoutは最初の合図みたいなものと思ってもらえれば
    steps:
    - checkout

    # 過去の実行結果がある場合はcacheから参照することで処理を高速化します
    - restore_cache:
        keys:
        - v1-dependencies-{{ checksum "Gemfile.lock" }}
        - v1-dependencies-

    # gemをinstallします。bundlerだけは最初にinstallしないとエラーになります
    - run:
        name: install dependencies
        command: |
          gem install bundler -v 2.1.4
          bundle install --jobs=4 --retry=3 --path vendor/bundle
    - save_cache:
        paths:
        - ./vendor/bundle
        key: v1-dependencies-{{ checksum "Gemfile.lock" }}

    # databaseのセットアップをします。rspecではDBとの接続が必要なのでこういうことをしてます
    - run: mv ./config/database.yml.ci ./config/database.yml

    - run: sleep 15 # Dockerコンテナが立ち上がる前にdb:createが走るとエラーになるので防ぐ

    # database setup
    - run:
        name: setup database
        command: |
           bundle exec rake db:create
           bundle exec rake db:schema:load

    # system specでは画面の表示をテストする必要があるのでyarnをinstallします
    - run:
        name: install yarn
        command: yarn install

    # rubocop
    - run:
        name: Rubocop
        command: |
            bundle exec rubocop -A

    # rspecを走らせる
    - run:
        name: run rspec
        command: bundle exec rspec

    # collect reports
    - store_test_results:
        path: /tmp/test-results

    - store_artifacts:
        path: /tmp/test-results
        destination: test-results